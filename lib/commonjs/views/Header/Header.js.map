{"version":3,"sources":["Header.tsx"],"names":["Header","React","PureComponent","render","scene","previous","layout","insets","navigation","styleInterpolator","props","options","descriptor","title","headerTitle","undefined","route","routeName","leftLabel","headerBackTitle","o","dispatch","StackActions","pop","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAGe,MAAMA,MAAN,SAAqBC,KAAK,CAACC,aAA3B,CAAsD;AACnEC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,QAFI;AAGJC,MAAAA,MAHI;AAIJC,MAAAA,MAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA;AANI,QAOF,KAAKC,KAPT;AAQA,UAAM;AAAEC,MAAAA;AAAF,QAAcP,KAAK,CAACQ,UAA1B;AACA,UAAMC,KAAK,GACT,OAAOF,OAAO,CAACG,WAAf,KAA+B,UAA/B,IACAH,OAAO,CAACG,WAAR,KAAwBC,SADxB,GAEIJ,OAAO,CAACG,WAFZ,GAGIH,OAAO,CAACE,KAAR,KAAkBE,SAAlB,GACAJ,OAAO,CAACE,KADR,GAEAT,KAAK,CAACY,KAAN,CAAYC,SANlB;AAQA,QAAIC,SAAJ,CAlBO,CAoBP;AACA;;AACA,QAAIP,OAAO,CAACQ,eAAR,KAA4BJ,SAAhC,EAA2C;AACzCG,MAAAA,SAAS,GAAGP,OAAO,CAACQ,eAApB;AACD,KAFD,MAEO,IAAId,QAAJ,EAAc;AACnB,YAAMe,CAAC,GAAGf,QAAQ,CAACO,UAAT,CAAoBD,OAA9B;AAEAO,MAAAA,SAAS,GACP,OAAOE,CAAC,CAACN,WAAT,KAAyB,UAAzB,IAAuC,OAAOM,CAAC,CAACN,WAAT,KAAyB,QAAhE,GACIM,CAAC,CAACN,WADN,GAEIM,CAAC,CAACP,KAAF,KAAYE,SAAZ,GACAK,CAAC,CAACP,KADF,GAEAR,QAAQ,CAACW,KAAT,CAAeC,SALrB;AAMD;;AAED,wBACE,oBAAC,sBAAD,eACMN,OADN;AAEE,MAAA,MAAM,EAAEL,MAFV;AAGE,MAAA,MAAM,EAAEC,MAHV;AAIE,MAAA,KAAK,EAAEH,KAJT;AAKE,MAAA,KAAK,EAAES,KALT;AAME,MAAA,SAAS,EAAEK,SANb;AAOE,MAAA,QAAQ,EACNb,QAAQ,GACJ,MACE;AACAG,MAAAA,UAAU,CAACa,QAAX,CAAoBC,8BAAaC,GAAb,CAAiB;AAAEC,QAAAA,GAAG,EAAEpB,KAAK,CAACY,KAAN,CAAYQ;AAAnB,OAAjB,CAApB,CAHE,GAIJT,SAZR;AAcE,MAAA,iBAAiB,EAAEN;AAdrB,OADF;AAkBD;;AAtDkE","sourcesContent":["import * as React from 'react';\nimport { StackActions } from 'react-navigation';\nimport HeaderSegment from './HeaderSegment';\nimport { HeaderProps } from '../../types';\n\nexport default class Header extends React.PureComponent<HeaderProps> {\n  render() {\n    const {\n      scene,\n      previous,\n      layout,\n      insets,\n      navigation,\n      styleInterpolator,\n    } = this.props;\n    const { options } = scene.descriptor;\n    const title =\n      typeof options.headerTitle !== 'function' &&\n      options.headerTitle !== undefined\n        ? options.headerTitle\n        : options.title !== undefined\n        ? options.title\n        : scene.route.routeName;\n\n    let leftLabel;\n\n    // The label for the left back button shows the title of the previous screen\n    // If a custom label is specified, we use it, otherwise use previous screen's title\n    if (options.headerBackTitle !== undefined) {\n      leftLabel = options.headerBackTitle;\n    } else if (previous) {\n      const o = previous.descriptor.options;\n\n      leftLabel =\n        typeof o.headerTitle !== 'function' && typeof o.headerTitle === 'string'\n          ? o.headerTitle\n          : o.title !== undefined\n          ? o.title\n          : previous.route.routeName;\n    }\n\n    return (\n      <HeaderSegment\n        {...options}\n        layout={layout}\n        insets={insets}\n        scene={scene}\n        title={title}\n        leftLabel={leftLabel}\n        onGoBack={\n          previous\n            ? () =>\n                // @ts-ignore\n                navigation.dispatch(StackActions.pop({ key: scene.route.key }))\n            : undefined\n        }\n        styleInterpolator={styleInterpolator}\n      />\n    );\n  }\n}\n"]}