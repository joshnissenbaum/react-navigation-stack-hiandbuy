{"version":3,"sources":["KeyboardManager.tsx"],"names":["React","TextInput","Keyboard","KeyboardManager","Component","input","State","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","dismiss","focusTextInput","render","props","children","onPageChangeStart","handlePageChangeStart","onPageChangeConfirm","handlePageChangeConfirm","onPageChangeCancel","handlePageChangeCancel"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AAUA,eAAe,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAAqD;AAAA;AAAA;;AAAA,wDAGd,IAHc;;AAAA,mDAKlC,MAAM;AACpC,YAAMC,KAAK,GAAGJ,SAAS,CAACK,KAAV,CAAgBC,qBAAhB,EAAd,CADoC,CAGpC;;AACAN,MAAAA,SAAS,CAACK,KAAV,CAAgBE,aAAhB,CAA8BH,KAA9B,EAJoC,CAMpC;;AACA,WAAKI,0BAAL,GAAkCJ,KAAlC;AACD,KAbiE;;AAAA,qDAehC,MAAM;AACtCH,MAAAA,QAAQ,CAACQ,OAAT,GADsC,CAGtC;;AACA,WAAKD,0BAAL,GAAkC,IAAlC;AACD,KApBiE;;AAAA,oDAsBjC,MAAM;AACrC;AACA,YAAMJ,KAAK,GAAG,KAAKI,0BAAnB;;AAEA,UAAIJ,KAAJ,EAAW;AACTJ,QAAAA,SAAS,CAACK,KAAV,CAAgBK,cAAhB,CAA+BN,KAA/B;AACD;;AAED,WAAKI,0BAAL,GAAkC,IAAlC;AACD,KA/BiE;AAAA;;AAiClEG,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKC,KAAL,CAAWC,QAAX,CAAoB;AACzBC,MAAAA,iBAAiB,EAAE,KAAKC,qBADC;AAEzBC,MAAAA,mBAAmB,EAAE,KAAKC,uBAFD;AAGzBC,MAAAA,kBAAkB,EAAE,KAAKC;AAHA,KAApB,CAAP;AAKD;;AAvCiE","sourcesContent":["import * as React from 'react';\nimport { TextInput, Keyboard } from 'react-native';\n\ntype Props = {\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: () => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\nexport default class KeyboardManager extends React.Component<Props> {\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n\n  private handlePageChangeStart = () => {\n    const input = TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n  };\n\n  private handlePageChangeConfirm = () => {\n    Keyboard.dismiss();\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = null;\n  };\n\n  private handlePageChangeCancel = () => {\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      TextInput.State.focusTextInput(input);\n    }\n\n    this.previouslyFocusedTextInput = null;\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"]}