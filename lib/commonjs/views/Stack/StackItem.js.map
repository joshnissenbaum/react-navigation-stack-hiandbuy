{"version":3,"sources":["StackItem.tsx"],"names":["StackItem","React","PureComponent","scene","onTransitionEnd","onOpenRoute","props","route","onCloseRoute","closing","onTransitionStart","onPageChangeConfirm","onPageChangeCancel","onGoBack","render","index","layout","active","focused","current","navigation","previousScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","cardTransparent","cardOverlayEnabled","cardShadowEnabled","cardStyle","gestureEnabled","onPageChangeStart","gestureResponseDistance","floatingHeaderHeight","headerShown","getPreviousRoute","headerMode","headerTransparent","renderHeader","renderScene","gestureDirection","transitionSpec","cardStyleInterpolator","headerStyleInterpolator","gestureVelocityImpact","insets","top","right","bottom","left","progress","next","handleOpen","handleClose","handleTransitionStart","marginTop","StyleSheet","absoluteFill","styles","container","mode","scenes","styleInterpolator","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport {\n  HeaderScene,\n  Layout,\n  HeaderMode,\n  NavigationStackProp,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  current: Animated.Value<number>;\n  previousScene?: HeaderScene;\n  scene: HeaderScene;\n  navigation: NavigationStackProp;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardTransparent?: boolean;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  gestureEnabled?: boolean;\n  getPreviousRoute: (props: {\n    route: NavigationRoute;\n  }) => NavigationRoute | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onOpenRoute: (props: { route: NavigationRoute }) => void;\n  onCloseRoute: (props: { route: NavigationRoute }) => void;\n  onGoBack: (props: { route: NavigationRoute }) => void;\n  onTransitionStart?: (\n    props: { route: NavigationRoute },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (\n    props: { route: NavigationRoute },\n    closing: boolean\n  ) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  headerMode: HeaderMode;\n  headerTransparent?: boolean;\n  floatingHeaderHeight: number;\n  headerShown: boolean;\n  gestureVelocityImpact?: number;\n};\n\nexport default class StackItem extends React.PureComponent<Props> {\n  private handleOpen = () => {\n    const { scene, onTransitionEnd, onOpenRoute } = this.props;\n\n    onTransitionEnd && onTransitionEnd({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  private handleClose = () => {\n    const { scene, onTransitionEnd, onCloseRoute } = this.props;\n\n    onTransitionEnd && onTransitionEnd({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  private handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    const {\n      scene,\n      onTransitionStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGoBack,\n    } = this.props;\n\n    if (closing) {\n      onPageChangeConfirm && onPageChangeConfirm();\n    } else {\n      onPageChangeCancel && onPageChangeCancel();\n    }\n\n    onTransitionStart && onTransitionStart({ route: scene.route }, closing);\n    closing && onGoBack({ route: scene.route });\n  };\n\n  render() {\n    const {\n      index,\n      layout,\n      active,\n      focused,\n      closing,\n      current,\n      navigation,\n      scene,\n      previousScene,\n      safeAreaInsetTop,\n      safeAreaInsetRight,\n      safeAreaInsetBottom,\n      safeAreaInsetLeft,\n      cardTransparent,\n      cardOverlayEnabled,\n      cardShadowEnabled,\n      cardStyle,\n      gestureEnabled,\n      onPageChangeStart,\n      onPageChangeCancel,\n      gestureResponseDistance,\n      floatingHeaderHeight,\n      headerShown,\n      getPreviousRoute,\n      headerMode,\n      headerTransparent,\n      renderHeader,\n      renderScene,\n      gestureDirection,\n      transitionSpec,\n      cardStyleInterpolator,\n      headerStyleInterpolator,\n      gestureVelocityImpact,\n    } = this.props;\n\n    const insets = {\n      top: safeAreaInsetTop,\n      right: safeAreaInsetRight,\n      bottom: safeAreaInsetBottom,\n      left: safeAreaInsetLeft,\n    };\n\n    return (\n      <Card\n        index={index}\n        active={active}\n        transparent={cardTransparent}\n        gestureDirection={gestureDirection}\n        layout={layout}\n        insets={insets}\n        current={current}\n        next={scene.progress.next}\n        closing={closing}\n        onOpen={this.handleOpen}\n        onClose={this.handleClose}\n        overlayEnabled={cardOverlayEnabled}\n        shadowEnabled={cardShadowEnabled}\n        gestureEnabled={gestureEnabled}\n        onTransitionStart={this.handleTransitionStart}\n        onGestureBegin={onPageChangeStart}\n        onGestureCanceled={onPageChangeCancel}\n        gestureResponseDistance={gestureResponseDistance}\n        transitionSpec={transitionSpec}\n        styleInterpolator={cardStyleInterpolator}\n        accessibilityElementsHidden={!focused}\n        importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n        pointerEvents=\"box-none\"\n        containerStyle={\n          headerMode === 'float' && !headerTransparent && headerShown !== false\n            ? { marginTop: floatingHeaderHeight }\n            : null\n        }\n        contentStyle={cardStyle}\n        style={StyleSheet.absoluteFill}\n        gestureVelocityImpact={gestureVelocityImpact}\n      >\n        <View style={styles.container}>\n          <View style={styles.scene}>\n            {renderScene({ route: scene.route })}\n          </View>\n          {headerMode === 'screen'\n            ? renderHeader({\n                mode: 'screen',\n                layout,\n                insets,\n                scenes: [previousScene, scene],\n                navigation,\n                getPreviousRoute,\n                styleInterpolator: headerStyleInterpolator,\n              })\n            : null}\n        </View>\n      </Card>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]}