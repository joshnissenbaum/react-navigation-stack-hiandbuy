{"version":3,"sources":["StackView.tsx"],"names":["React","Platform","SafeAreaProvider","SafeAreaConsumer","SceneView","StackActions","Stack","HeaderContainer","DEFAULT_INSETS","top","right","bottom","left","StackView","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","undefined","OS","filter","r","includes","index","findIndex","props","navigation","getComponent","SceneComponent","screenProps","dispatch","completeTransition","toChildKey","pop","handleTransitionComplete","setState","length","Math","max","getDerivedStateFromProps","reduce","acc","slice","console","warn","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","find","splice","Error","render","navigationConfig","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","mode","config","headerMode","insets","getPreviousRoute","getGesturesEnabled","handleGoBack","handleOpenRoute","handleCloseRoute","renderHeader","renderScene"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n} from 'react-native-safe-area-context';\nimport { SceneView, StackActions, NavigationRoute } from 'react-navigation';\nimport Stack from './Stack';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport {\n  NavigationStackProp,\n  NavigationStackConfig,\n  SceneDescriptorMap,\n} from '../../types';\n\ntype Props = {\n  navigation: NavigationStackProp;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: NavigationStackConfig;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  screenProps?: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: NavigationRoute[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: NavigationRoute[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: SceneDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: SceneDescriptorMap;\n};\n\nconst DEFAULT_INSETS = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n};\n\nclass StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    const { navigation } = props;\n\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      navigation.state.routes === state.previousRoutes &&\n      state.routes.length\n    ) {\n      if (props.descriptors !== state.previousDescriptors) {\n        const descriptors = state.routes.reduce<SceneDescriptorMap>(\n          (acc, route) => {\n            acc[route.key] =\n              props.descriptors[route.key] || state.descriptors[route.key];\n\n            return acc;\n          },\n          {}\n        );\n\n        return {\n          previousDescriptors: props.descriptors,\n          descriptors,\n        };\n      }\n\n      return null;\n    }\n\n    let routes =\n      navigation.state.index < navigation.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          navigation.state.routes.slice(0, navigation.state.index + 1)\n        : navigation.state.routes;\n\n    if (navigation.state.index < navigation.state.routes.length - 1) {\n      console.warn(\n        'StackRouter provided invalid state, index should always be the last route in the stack.'\n      );\n    }\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | NavigationRoute\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      const isAnimationEnabled = (route: NavigationRoute) => {\n        const descriptor =\n          props.descriptors[route.key] || state.descriptors[route.key];\n\n        return descriptor\n          ? descriptor.options.animationEnabled !== false\n          : true;\n      };\n\n      if (!previousRoutes.find(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            replacingRouteKeys = [\n              ...replacingRouteKeys,\n              previousFocusedRoute.key,\n            ];\n\n            openingRouteKeys = openingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n            closingRouteKeys = closingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n\n            // Keep the old route in state because it's visible under the new route, and removing it will feel abrupt\n            // We need to insert it just before the focused one (the route being pushed)\n            // After the push animation is completed, routes being replaced will be removed completely\n            routes = routes.slice();\n            routes.splice(routes.length - 1, 0, previousFocusedRoute);\n          }\n        }\n      } else if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          openingRouteKeys = openingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(\n          ({ key }) =>\n            replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(`There should always be at least one route.`);\n    }\n\n    const descriptors = routes.reduce<SceneDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: navigation.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: NavigationRoute }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: NavigationRoute }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      r =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n    const index = routes.findIndex(r => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: NavigationRoute }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = ({\n    route,\n  }: {\n    route: NavigationRoute;\n  }) => {\n    // TODO: remove when the new event system lands\n    this.props.navigation.dispatch(\n      StackActions.completeTransition({ toChildKey: route.key })\n    );\n  };\n\n  private handleGoBack = ({ route }: { route: NavigationRoute }) => {\n    // This event will trigger when a gesture ends\n    // We need to perform the transition before removing the route completely\n    // @ts-ignore\n    this.props.navigation.dispatch(StackActions.pop({ key: route.key }));\n  };\n\n  private handleOpenRoute = ({ route }: { route: NavigationRoute }) => {\n    this.handleTransitionComplete({ route });\n    this.setState(state => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      replacingRouteKeys: [],\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: NavigationRoute }) => {\n    const index = this.state.routes.findIndex(r => r.key === route.key);\n    // While closing route we need to point to the previous one assuming that\n    // this previous one in routes array\n    this.handleTransitionComplete({\n      route: this.state.routes[Math.max(index - 1, 0)],\n    });\n\n    // This event will trigger when the animation for closing the route ends\n    // In this case, we need to clean up any state tracking the route and pop it immediately\n\n    // @ts-ignore\n    this.setState(state => ({\n      routes: state.routes.filter(r => r.key !== route.key),\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n    }));\n  };\n\n  render() {\n    const {\n      navigation,\n      navigationConfig,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { mode = 'card', ...config } = navigationConfig;\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <SafeAreaProvider>\n        <SafeAreaConsumer>\n          {insets => (\n            <Stack\n              mode={mode}\n              insets={insets || DEFAULT_INSETS}\n              getPreviousRoute={this.getPreviousRoute}\n              getGesturesEnabled={this.getGesturesEnabled}\n              routes={routes}\n              openingRoutesKeys={openingRouteKeys}\n              closingRoutesKeys={closingRouteKeys}\n              onGoBack={this.handleGoBack}\n              onOpenRoute={this.handleOpenRoute}\n              onCloseRoute={this.handleCloseRoute}\n              onPageChangeStart={onPageChangeStart}\n              onPageChangeConfirm={onPageChangeConfirm}\n              onPageChangeCancel={onPageChangeCancel}\n              renderHeader={this.renderHeader}\n              renderScene={this.renderScene}\n              headerMode={headerMode}\n              navigation={navigation}\n              descriptors={descriptors}\n              {...config}\n            />\n          )}\n        </SafeAreaConsumer>\n      </SafeAreaProvider>\n    );\n  }\n}\n\nexport default StackView;\n"]}