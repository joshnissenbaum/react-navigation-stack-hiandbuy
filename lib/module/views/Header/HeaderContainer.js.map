{"version":3,"sources":["HeaderContainer.tsx"],"names":["React","View","StyleSheet","NavigationContext","Header","forStatic","HeaderContainer","mode","scenes","layout","insets","navigation","getPreviousRoute","onContentHeightChange","styleInterpolator","style","focusedRoute","state","routes","index","map","scene","i","self","length","options","descriptor","isFocused","key","route","previousRoute","previous","j","s","previousScene","nextScene","isHeaderStatic","header","headerShown","props","e","height","nativeEvent","undefined","headerTransparent","styles","create","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { NavigationContext, NavigationRoute } from 'react-navigation';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  Layout,\n  HeaderScene,\n  NavigationStackProp,\n  HeaderStyleInterpolator,\n} from '../../types';\nimport Header from './Header';\nimport { forStatic } from '../../TransitionConfigs/HeaderStyleInterpolators';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: Array<HeaderScene | undefined>;\n  navigation: NavigationStackProp;\n  getPreviousRoute: (props: {\n    route: NavigationRoute;\n  }) => NavigationRoute | undefined;\n  onContentHeightChange?: (props: {\n    route: NavigationRoute;\n    height: number;\n  }) => void;\n  styleInterpolator: HeaderStyleInterpolator;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  navigation,\n  getPreviousRoute,\n  onContentHeightChange,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = navigation.state.routes[navigation.state.index];\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { options } = scene.descriptor;\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previousRoute = getPreviousRoute({ route: scene.route });\n\n        let previous;\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = i - 1; j >= 0; j--) {\n            const s = self[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previous = s;\n              break;\n            }\n          }\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n        const isHeaderStatic =\n          mode === 'float'\n            ? (previousScene &&\n                (previousScene.descriptor.options.header === null ||\n                  previousScene.descriptor.options.headerShown === false) &&\n                // We still need to animate when coming back from next scene\n                // A hacky way to check this is if the next scene exists\n                !nextScene) ||\n              (nextScene &&\n                (nextScene.descriptor.options.header === null ||\n                  nextScene.descriptor.options.headerShown === false))\n            : false;\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as NavigationStackProp,\n          styleInterpolator: isHeaderStatic ? forStatic : styleInterpolator,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <View\n              onLayout={\n                onContentHeightChange\n                  ? e =>\n                      onContentHeightChange({\n                        route: scene.route,\n                        height: e.nativeEvent.layout.height,\n                      })\n                  : undefined\n              }\n              pointerEvents=\"box-none\"\n              accessibilityElementsHidden={!isFocused}\n              importantForAccessibility={\n                isFocused ? 'auto' : 'no-hide-descendants'\n              }\n              style={\n                mode === 'float' || options.headerTransparent\n                  ? styles.header\n                  : null\n              }\n            >\n              {options.headerShown !== false ? (\n                options.header !== undefined ? (\n                  typeof options.header === 'function' ? (\n                    options.header(props)\n                  ) : (\n                    options.header\n                  )\n                ) : (\n                  <Header {...props} />\n                )\n              ) : null}\n            </View>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}